/*!
 * Hesabe Apple Pay v1.0.0
 * Apple Pay integration library for Hesabe payment gateway
 * (c) 2025 Salman Ulfaris
 * Released under the MIT License.
 */
!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):(e="undefined"!=typeof globalThis?globalThis:e||self).HesabeApplePay=t()}(this,function(){"use strict";class e{static PAYMENT_TYPES={STANDARD:9,KNET_DEBIT:11,KNET_CREDIT:12,VISA:10};static APPLE_PAYMENT_METHOD_IDS=[9,10,11,12,13,14];static SUPPORTED_NETWORKS=["visa","masterCard"];static DEFAULT_MERCHANT_CAPABILITIES=["supports3DS"];#e;#t;constructor(e={}){this.#e=this.#n(e),this.#t={routes:{appleValidation:this.#a()+"/transaction/apple",payment:this.#a()+"/payment"},token:this.#e.token},this.#i()}#n(e){const t={env:"sandbox",debug:!1,currencyCode:"KWD",countryCode:"KW",amount:"",token:"",requestData:"",availablePaymentGateways:[],elements:{applePayButtonContainer:"applePayment",applePayButtonQuerySelector:".applePaybtn"},...e};return t.merchantIdentifier="production"===t.env?"merchant.hesabe.prod":"merchant.hesabe.dev",t.sessionId=t.sessionId||this.#o(),t}#a(){return"production"===this.#e.env?"https://hesabe.com":"https://sandbox.hesabe.com"}#o(){return`apple-direct-${Date.now()}-${Math.random().toString(36).substr(2,9)}`}#i(){const e={token:"Token is required",requestData:"Request data is required",amount:"Amount is required",availablePaymentGateways:"Available payment gateways are required",countryCode:"Country code is required",env:"Environment is required",currencyCode:"Currency code is required"};for(const[t,n]of Object.entries(e))if(!this.#e[t]||Array.isArray(this.#e[t])&&0===this.#e[t].length)throw new Error(`[HesabeApplePay] ${n}`)}#s(){"loading"===document.readyState?document.addEventListener("DOMContentLoaded",()=>this.#r()):this.#r()}#r(){window.ApplePaySession?this.#l()?this.#p():this.#c("Apple Pay not supported or not enabled for merchant"):this.#c("Apple Pay not available in this browser")}#l(){return window.ApplePaySession&&this.#e.merchantIdentifier&&e.APPLE_PAYMENT_METHOD_IDS.some(e=>this.#e.availablePaymentGateways.includes(e))}async#p(){try{if(!await ApplePaySession.canMakePaymentsWithActiveCard(this.#e.merchantIdentifier))return void this.#c("Apple Pay available in browser, but merchant not activated for domain");this.#d(),this.#c("Apple Pay initialized successfully")}catch(e){this.#c("Apple Pay initialization failed:",e)}}#y(t){const n=this.#u(t),a=this.#h(t);return{countryCode:this.#e.countryCode,currencyCode:this.#e.currencyCode,total:{label:this.#e.merchantCode||"Hesabe Payment",type:"final",amount:this.#e.amount},supportedNetworks:e.SUPPORTED_NETWORKS,merchantCapabilities:n,supportedCountries:a}}async#P(e){const t=this.#y(e),n=new ApplePaySession(4,t);n.onvalidatemerchant=async t=>{this.#c("Validating merchant...");try{const a=this.#g(t.validationURL,e),i=await fetch(a);if(!i.ok)throw new Error(`Validation failed: ${i.status}`);const o=await i.json();n.completeMerchantValidation(o)}catch(e){this.#c("Merchant validation failed:",e),n.abort()}},n.onpaymentauthorized=t=>{this.#c("Payment authorized",t.payment),this.#f(t.payment,e,n)},n.oncancel=e=>{this.#c("Apple Pay cancelled",e)},n.begin()}#d(){const e=document.getElementById(this.#e.elements.applePayButtonContainer);e?(e.style.display="block",document.querySelectorAll(this.#e.elements.applePayButtonQuerySelector).forEach(e=>{const t=parseInt(e.dataset.paymenttype),n=t&&this.#e.availablePaymentGateways.includes(t);e.style.display=n?"inline-block":"none",e.onclick=e=>{e.preventDefault(),n?this.#P(t):this.#c("Apple Pay button not enabled for this merchant")}})):this.#c("Apple Pay button container not found")}#u(t){switch(t){case e.PAYMENT_TYPES.KNET_DEBIT:return[...e.DEFAULT_MERCHANT_CAPABILITIES,"supportsDebit"];case e.PAYMENT_TYPES.KNET_CREDIT:return[...e.DEFAULT_MERCHANT_CAPABILITIES,"supportsCredit"];default:return e.DEFAULT_MERCHANT_CAPABILITIES}}#h(e){return[this.#e.countryCode]}#g(e,t){const n=new URLSearchParams({u:e,token:this.#t.token,serviceId:new URLSearchParams(location.search).get("serviceTypeId")||"",payId:t});return`${this.#t.routes.appleValidation}?${n.toString()}`}#f(e,t,n){try{const a=new URLSearchParams({token:this.#t.token,paymentType:t,data:this.#e.requestData,applePaymentToken:JSON.stringify(e.token.paymentData),paymentMethod:JSON.stringify(e.token.paymentMethod),session_id:this.#e.sessionId,transactionIdentifier:(e.token.transactionIdentifier||"").toLowerCase()}),i=`${this.#t.routes.payment}?${a.toString()}`;n.completePayment(ApplePaySession.STATUS_SUCCESS),location.href=i}catch(e){this.#c("Payment processing failed:",e),n.completePayment(ApplePaySession.STATUS_FAILURE)}}#c(...e){this.#e.debug}init(){return this.#s(),this}}return e});
